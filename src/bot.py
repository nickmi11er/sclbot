# -*- coding: utf-8 -*-
import data_manager, date_manager, scl_manager
from handler import ButtonHandlerFactory
from datetime import datetime as dm
import keyboard as kb
from tbot import Bot, HandlerType
from models.user import User
import logging
import const
import os


logging.basicConfig(filename=const.root_path + '/log.txt', level=logging.INFO,
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')


bot = Bot(const._bot_token, const._request_kwargs)

def log_bot_request(message, action):
    user = message.from_user
    logging.info(
        u'Action: {}, from user id: {}, {} {} ({}) - message_id: {}, chat: {}, message: '.format(action,
                                                                                                 user.id,
                                                                                                 user.last_name,
                                                                                                 user.first_name,
                                                                                                 user.username,
                                                                                                 message.message_id,
                                                                                                 message.chat.title,
                                                                                                 message.text))


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω—Å–∫–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º
def check_permission(user_id):
    user = data_manager.get_user(user_id)
    return user and user[3] == 1


def auth(func):
    def decorator(bt, update):
        if private_chat(update.message.chat):
            id = update.message.from_user.id
        else:
            id = update.message.chat.id
        user = User.get(id)
        if user:
            func(bt, update)
        else:
            _welcome(bt, update, private_chat(update.message.chat))
    return decorator


# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–¥–µ–ª–∞–≤—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å
@bot.handle(name='my_id')
def my_id(bt, update):
    bot.reply(update, "–í–∞—à ID: {}".format(update.message.from_user.id))


# CommandHandler: –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
@auth
@bot.handle(name='s')
def schedule(bt, update):
    res = u''

    if private_chat(update.message.chat):
        id = update.message.from_user.id
    else:
        id = update.message.chat.id

    res = scl_manager.get_scl(None, id) 
    log_bot_request(update.message, 'Schedule')
    bot.reply(update, res)           



# CommandHandler: –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
@auth
@bot.handle(name='sb')
def schedule_with(bt, update):
    log_bot_request(update.message, 'Schedule With')
    keyboard = kb.weekday_kb(dm.now().weekday(), False)
    bot.reply(update, '–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏?', keyboard)


@bot.handle(type=HandlerType.BUTTON)
def button(bt, update):
    query = update.callback_query
    handler = ButtonHandlerFactory().get_handler(query)
    if handler and handler.ready:
        params = handler.gen_params()
        bot.send_answer(bt, params)
    elif query.data == 'ignore':
        bt.answer_callback_query(query.id, text="")


# @bot.handle(name='ll')
# def lecturers_list(bt, update):
#     log_bot_request(update.message, 'get lecturers list')
#     update.message.reply_text(data_manager.get_lecturers())


@bot.handle(name='notime')
def notify_me(bt, update):
    log_bot_request(update.message, 'Notify Me')
    msg = ''
    subscriber = data_manager.get_subscriber(update.message.chat.id)
    if subscriber is None:
        data_manager.add_subscriber(update.message.chat.id, update.message.from_user.id)
        msg = '–¢–µ–ø–µ—Ä—å –≤–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
    else:
        msg = '–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'

    bot.reply(update, msg)


@bot.handle(name='unsub')
def unsubscribe(bt, update):
    log_bot_request(update.message, 'Unsubscribe')
    msg = ''
    subscriber = data_manager.get_subscriber(update.message.chat.id)
    if subscriber is not None:
        data_manager.delete_subscriber(update.message.chat.id)
        msg = '–í–∞–º –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
    else:
        msg = '–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'

    bot.reply(update, msg)


@bot.handle(name='start')
def start(bt, update):
    log_bot_request(update.message, 'Start')
    private = private_chat(update.message.chat)
    if private:
        user = data_manager.get_user(update.message.from_user.id)
    else:
        user = data_manager.get_user(update.message.chat.id)

    if user:
        keyboard = kb.menu_kb()
        bt.send_message(chat_id = update.message.chat_id, text = '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É', reply_markup=keyboard)
    else:
        _welcome(bt, update, private)


def _welcome(bt, update, private):
    institutes = scl_manager.institutes()
    inst_kb = kb.inst_kb(institutes, private)

    res = '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç'
    if not  private_chat(update.message.chat):
        res = '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —è –Ω–∞—Ö–æ–∂—É—Å—å –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ. –í—ã–±—Ä–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ –±—É–¥–µ—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π –¥–ª—è –≤—Å–µ—Ö —á–ª–µ–Ω–æ–≤ —á–∞—Ç–∞.\n' + res
    bt.send_message(chat_id = update.message.chat_id, text = res, reply_markup=inst_kb)


def private_chat(chat):
    return chat.type == 'private'   

@auth
def choose_gp(bt, update):
    private = private_chat(update.message.chat)
    # keyboard = kb.groups_kb(groups, private)

    institutes = scl_manager.institutes()
    inst_kb = kb.inst_kb(institutes, private)

    if private:
        user = data_manager.get_user(update.message.from_user.id)
    else:
        user = data_manager.get_user(update.message.chat.id)
    bot.reply(update, u'–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –≥—Ä—É–ø–ø–∞: {}\n–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–±–Ω—É—é –≥—Ä—É–ø–ø—É'.format(user['group_name']), inst_kb)

lg = '*–õ–µ–≥–µ–Ω–¥–∞*\n\n‚ñ´Ô∏è- –õ–µ–∫—Ü–∏—è\n‚ùó- –°–µ–º–∏–Ω–∞—Ä\nüë©‚Äçüî¨- –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è\nüìÉ- –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é\nüìÜ- –ö–∞–ª–µ–Ω–¥–∞—Ä—å'

@bot.handle(name="l")
def legend(bt, upd):
    log_bot_request(upd.message, 'Legend')
    bot.reply(upd, lg)


commands = {
    u'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è': schedule,
    u'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å': schedule_with,
    # u'–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π –ø–ª–∞–Ω': academy_plan,
    u'–õ–µ–≥–µ–Ω–¥–∞': legend,
    u'–£–≤–µ–¥–æ–º–ª—è—Ç—å –æ —Å–æ–±—ã—Ç–∏—è—Ö': notify_me,
    u'–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π':unsubscribe,
    u'–í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É': choose_gp
}

@bot.handle(type=HandlerType.MESSAGE)
def filter (bt, upd): 
    msg = upd.message
    # bt.send_document(chat_id=upd.message.chat_id, document=upd.message.document, caption="Test Caption")
    if msg.reply_to_message and bot.pop_listened_msg(msg.reply_to_message) is not None:
        bot.echo_for_all(msg.text)
    else:
        upd.message.text in commands and commands[msg.text](bt, upd)


@bot.handle(name='echo')
def echo(bt, upd):
    log_bot_request(upd.message, 'Echo')
    usr = data_manager.get_user(upd.message.from_user.id)
    if usr and usr['role'] == 1 or usr['role'] == 3: # 1 - admin, 3 - group master
        msg = bt.send_message(chat_id=upd.message.chat_id, text='–•–æ—Ä–æ—à–æ! –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ –º–Ω–µ –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.')
        bot.listen_for_message(upd.message.chat_id, msg.message_id)


notified = False
def scl_notifier(bt, job):
    dm_now = date_manager.m_now()
    if dm_now.weekday() == 5:
        return

    global notified
    current_hour = dm_now.hour
    if 20 <= current_hour < 21 and not notified:
        notified = True
        for subscriber in data_manager.get_subscribers():
            bot.send_message(bt, subscriber['chat_id'], scl_manager.get_scl(date_manager.get_day_over(1), subscriber['tg_user_id']))
    elif current_hour >= 21:
        notified = False

def local_time_check():
    dm_now = date_manager.m_now()
    return dm_now.strftime("Now %d.%m.%Y %H:%M")

def main():
    print local_time_check()
    bot.polling()
    print('Bot is started...')
    scl_notifier_job = bot.add_repeating_job(scl_notifier)
    print('Schedule notifier started...')
    bot.idle()



if __name__ == '__main__':
    main()
